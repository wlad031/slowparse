// generated by gen-sequencers.sc, n = 22
// format: off
package dev.vgerasimov.slowparse

object Sequencers {

  // types
  private type Not[x] = scala.util.NotGiven[x]
  private type nu[x] = Not[x =:= Unit]
  private type nt2[x] = Not[x <:< (?,?)]
  private type nt3[x] = Not[x <:< (?,?,?)]
  private type nt4[x] = Not[x <:< (?,?,?,?)]
  private type nt5[x] = Not[x <:< (?,?,?,?,?)]
  private type nt6[x] = Not[x <:< (?,?,?,?,?,?)]
  private type nt7[x] = Not[x <:< (?,?,?,?,?,?,?)]
  private type nt8[x] = Not[x <:< (?,?,?,?,?,?,?,?)]
  private type nt9[x] = Not[x <:< (?,?,?,?,?,?,?,?,?)]
  private type nt10[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?)]
  private type nt11[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?)]
  private type nt12[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?)]
  private type nt13[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?,?)]
  private type nt14[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
  private type nt15[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
  private type nt16[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
  private type nt17[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
  private type nt18[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
  private type nt19[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
  private type nt20[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
  private type nt21[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
  private type nt22[x] = Not[x <:< (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]

  // givens

  given dropBothUnits: Sequencer[Unit, Unit, Unit] with {
    override def apply(l: Unit, r: Unit) = ()
  }

  given dropLeftUnit[R : nu]: Sequencer[Unit, R, R] with {
    override def apply(l: Unit, r: R) = r
  }

  given dropRightUnit[L : nu]: Sequencer[L, Unit, L] with {
    override def apply(l: L, r: Unit) = l
  }

  given toTuple2[L : nu : nt2:nt3:nt4:nt5:nt6:nt7:nt8:nt9:nt10:nt11:nt12:nt13:nt14:nt15:nt16:nt17:nt18:nt19:nt20:nt21, R : nu]: Sequencer[L, R, (L, R)] with {
    override def apply(l: L, r: R) = (l, r)
  }

  given toTuple3[T1,T2, R : nu]: Sequencer[(T1,T2), R, (T1,T2, R)] with {
    override def apply(l: (T1,T2), r: R) = (l._1,l._2, r)
  }

  given toTuple4[T1,T2,T3, R : nu]: Sequencer[(T1,T2,T3), R, (T1,T2,T3, R)] with {
    override def apply(l: (T1,T2,T3), r: R) = (l._1,l._2,l._3, r)
  }

  given toTuple5[T1,T2,T3,T4, R : nu]: Sequencer[(T1,T2,T3,T4), R, (T1,T2,T3,T4, R)] with {
    override def apply(l: (T1,T2,T3,T4), r: R) = (l._1,l._2,l._3,l._4, r)
  }

  given toTuple6[T1,T2,T3,T4,T5, R : nu]: Sequencer[(T1,T2,T3,T4,T5), R, (T1,T2,T3,T4,T5, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5), r: R) = (l._1,l._2,l._3,l._4,l._5, r)
  }

  given toTuple7[T1,T2,T3,T4,T5,T6, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6), R, (T1,T2,T3,T4,T5,T6, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6, r)
  }

  given toTuple8[T1,T2,T3,T4,T5,T6,T7, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7), R, (T1,T2,T3,T4,T5,T6,T7, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7, r)
  }

  given toTuple9[T1,T2,T3,T4,T5,T6,T7,T8, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8), R, (T1,T2,T3,T4,T5,T6,T7,T8, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8, r)
  }

  given toTuple10[T1,T2,T3,T4,T5,T6,T7,T8,T9, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9, r)
  }

  given toTuple11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10, r)
  }

  given toTuple12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11, r)
  }

  given toTuple13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11,l._12, r)
  }

  given toTuple14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11,l._12,l._13, r)
  }

  given toTuple15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11,l._12,l._13,l._14, r)
  }

  given toTuple16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11,l._12,l._13,l._14,l._15, r)
  }

  given toTuple17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11,l._12,l._13,l._14,l._15,l._16, r)
  }

  given toTuple18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11,l._12,l._13,l._14,l._15,l._16,l._17, r)
  }

  given toTuple19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11,l._12,l._13,l._14,l._15,l._16,l._17,l._18, r)
  }

  given toTuple20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11,l._12,l._13,l._14,l._15,l._16,l._17,l._18,l._19, r)
  }

  given toTuple21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11,l._12,l._13,l._14,l._15,l._16,l._17,l._18,l._19,l._20, r)
  }

  given toTuple22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21, R : nu]: Sequencer[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21), R, (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21, R)] with {
    override def apply(l: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21), r: R) = (l._1,l._2,l._3,l._4,l._5,l._6,l._7,l._8,l._9,l._10,l._11,l._12,l._13,l._14,l._15,l._16,l._17,l._18,l._19,l._20,l._21, r)
  }

}
// format: on
